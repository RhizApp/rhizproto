# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from pydantic import BaseModel, ConfigDict

import baml_py

from . import types

StreamStateValueT = typing.TypeVar('StreamStateValueT')
class StreamState(BaseModel, typing.Generic[StreamStateValueT]):
    value: StreamStateValueT
    state: typing_extensions.Literal["Pending", "Incomplete", "Complete"]
# #########################################################################
# Generated classes (15)
# #########################################################################

class ContextHighlight(BaseModel):
    highlight: typing.Optional[str] = None
    relevance_score: typing.Optional[int] = None
    type: typing.Optional[str] = None

class ConvictionExplanation(BaseModel):
    conviction_score: typing.Optional[int] = None
    confidence_level: typing.Optional[str] = None
    attestation_summary: typing.Optional[str] = None
    key_attesters: typing.List[str]
    positive_signals: typing.List[str]
    negative_signals: typing.List[str]
    recommendation: typing.Optional[str] = None
    verification_status: typing.Optional[str] = None

class ExtractedRelationship(BaseModel):
    participant_a_name: typing.Optional[str] = None
    participant_a_handle: typing.Optional[str] = None
    participant_b_name: typing.Optional[str] = None
    participant_b_handle: typing.Optional[str] = None
    relationship_type: typing.Optional[str] = None
    relationship_strength: typing.Optional[int] = None
    context: typing.Optional[str] = None
    duration_years: typing.Optional[float] = None
    evidence: typing.List[str]
    confidence_score: typing.Optional[int] = None

class FollowupMessage(BaseModel):
    message_body: typing.Optional[str] = None
    subject_line: typing.Optional[str] = None
    timing_justification: typing.Optional[str] = None
    new_information: typing.Optional[str] = None
    tone_adjustment: typing.Optional[str] = None

class ForwardingIntro(BaseModel):
    subject_line: typing.Optional[str] = None
    intro_text: typing.Optional[str] = None
    requester_summary: typing.Optional[str] = None
    value_proposition: typing.Optional[str] = None
    personalization_suggestions: typing.List[str]
    response_template: typing.Optional[str] = None

class IntroFeasibility(BaseModel):
    feasibility_score: typing.Optional[int] = None
    feasibility_level: typing.Optional[str] = None
    success_factors: typing.List[str]
    blocking_factors: typing.List[str]
    recommended_approach: typing.Optional[str] = None
    timing_recommendation: typing.Optional[str] = None
    alternative_suggestions: typing.List[str]

class IntroOrchestrationPlan(BaseModel):
    total_steps: typing.Optional[int] = None
    steps: typing.List["OrchestrationStep"]
    timeline_days: typing.Optional[int] = None
    success_probability: typing.Optional[int] = None
    risk_factors: typing.List[str]
    mitigation_strategies: typing.List[str]
    alternative_paths: typing.List[str]

class IntroductionMessage(BaseModel):
    recipient_did: typing.Optional[str] = None
    recipient_name: typing.Optional[str] = None
    subject_line: typing.Optional[str] = None
    message_body: typing.Optional[str] = None
    message_tone: typing.Optional["MessageTone"] = None
    context_highlights: typing.List["ContextHighlight"]
    call_to_action: typing.Optional[str] = None
    optimal_send_time: typing.Optional[str] = None
    followup_timing_days: typing.Optional[int] = None
    success_probability: typing.Optional[int] = None
    personalization_score: typing.Optional[int] = None

class MessageTone(BaseModel):
    formality: typing.Optional[str] = None
    urgency: typing.Optional[str] = None
    length: typing.Optional[str] = None

class OrchestrationStep(BaseModel):
    step_number: typing.Optional[int] = None
    recipient_did: typing.Optional[str] = None
    message_type: typing.Optional[str] = None
    message: typing.Optional["IntroductionMessage"] = None
    depends_on_step: typing.Optional[int] = None
    success_criteria: typing.Optional[str] = None

class PathExplanation(BaseModel):
    path_strength: typing.Optional[int] = None
    hop_count: typing.Optional[int] = None
    why_optimal: typing.Optional[str] = None
    relationship_quality: typing.List[str]
    alternative_paths_considered: typing.Optional[int] = None
    why_others_rejected: typing.Optional[str] = None
    risk_factors: typing.List[str]
    success_probability: typing.Optional[int] = None
    strategy_recommendation: typing.Optional[str] = None

class RelationshipExtractionResult(BaseModel):
    relationships: typing.List["ExtractedRelationship"]
    total_found: typing.Optional[int] = None
    extraction_quality: typing.Optional[int] = None
    ambiguous_cases: typing.List[str]

class RelationshipQualityAssessment(BaseModel):
    has_sufficient_context: typing.Optional[bool] = None
    has_quantifiable_metrics: typing.Optional[bool] = None
    has_verification_potential: typing.Optional[bool] = None
    strength_justification: typing.Optional[str] = None
    suggested_improvements: typing.List[str]
    quality_score: typing.Optional[int] = None
    attestation_potential: typing.Optional[int] = None

class TrustExplanation(BaseModel):
    overall_trust_score: typing.Optional[int] = None
    explanation_summary: typing.Optional[str] = None
    breakdown: typing.List["TrustScoreBreakdown"]
    strengths: typing.List[str]
    concerns: typing.List[str]
    comparison_to_network: typing.Optional[str] = None
    trend: typing.Optional[str] = None
    recommendation: typing.Optional[str] = None

class TrustScoreBreakdown(BaseModel):
    component: typing.Optional[str] = None
    score: typing.Optional[int] = None
    weight: typing.Optional[float] = None
    explanation: typing.Optional[str] = None
    key_factors: typing.List[str]

# #########################################################################
# Generated type aliases (0)
# #########################################################################

# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
import baml_py

from . import stream_types, types, type_builder
from .parser import LlmResponseParser, LlmStreamParser
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME as __runtime__

class BamlSyncClient:
    __options: DoNotUseDirectlyCallManager
    __stream_client: "BamlStreamClient"
    __http_request: "BamlHttpRequestClient"
    __http_stream_request: "BamlHttpStreamRequestClient"
    __llm_response_parser: LlmResponseParser
    __llm_stream_parser: LlmStreamParser

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options
        self.__stream_client = BamlStreamClient(options)
        self.__http_request = BamlHttpRequestClient(options)
        self.__http_stream_request = BamlHttpStreamRequestClient(options)
        self.__llm_response_parser = LlmResponseParser(options)
        self.__llm_stream_parser = LlmStreamParser(options)

    def __getstate__(self):
        # Return state needed for pickling
        return {"options": self.__options}

    def __setstate__(self, state):
        # Restore state from pickling
        self.__options = state["options"]
        self.__stream_client = BamlStreamClient(self.__options)
        self.__http_request = BamlHttpRequestClient(self.__options)
        self.__http_stream_request = BamlHttpStreamRequestClient(self.__options)
        self.__llm_response_parser = LlmResponseParser(self.__options)
        self.__llm_stream_parser = LlmStreamParser(self.__options)

    def with_options(self,
        tb: typing.Optional[type_builder.TypeBuilder] = None,
        client_registry: typing.Optional[baml_py.baml_py.ClientRegistry] = None,
        collector: typing.Optional[typing.Union[baml_py.baml_py.Collector, typing.List[baml_py.baml_py.Collector]]] = None,
        env: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None,
        tags: typing.Optional[typing.Dict[str, str]] = None,
        on_tick: typing.Optional[typing.Callable[[str, baml_py.baml_py.FunctionLog], None]] = None,
    ) -> "BamlSyncClient":
        options: BamlCallOptions = {}
        if tb is not None:
            options["tb"] = tb
        if client_registry is not None:
            options["client_registry"] = client_registry
        if collector is not None:
            options["collector"] = collector
        if env is not None:
            options["env"] = env
        if tags is not None:
            options["tags"] = tags
        if on_tick is not None:
            options["on_tick"] = on_tick
        return BamlSyncClient(self.__options.merge_options(options))

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser
    
    def AssessIntroductionFeasibility(self, requester_did: str,target_did: str,proposed_path: str,relationship_data: str,introduction_purpose: str,timing_context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> types.IntroFeasibility:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            stream = self.stream.AssessIntroductionFeasibility(requester_did=requester_did,target_did=target_did,proposed_path=proposed_path,relationship_data=relationship_data,introduction_purpose=introduction_purpose,timing_context=timing_context,
                baml_options=baml_options)
            return stream.get_final_response()
        else:
            # Original non-streaming code
            result = self.__options.merge_options(baml_options).call_function_sync(function_name="AssessIntroductionFeasibility", args={
                "requester_did": requester_did,"target_did": target_did,"proposed_path": proposed_path,"relationship_data": relationship_data,"introduction_purpose": introduction_purpose,"timing_context": timing_context,
            })
            return typing.cast(types.IntroFeasibility, result.cast_to(types, types, stream_types, False, __runtime__))
    def AssessRelationshipQuality(self, relationship_context: str,claimed_strength: int,
        baml_options: BamlCallOptions = {},
    ) -> types.RelationshipQualityAssessment:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            stream = self.stream.AssessRelationshipQuality(relationship_context=relationship_context,claimed_strength=claimed_strength,
                baml_options=baml_options)
            return stream.get_final_response()
        else:
            # Original non-streaming code
            result = self.__options.merge_options(baml_options).call_function_sync(function_name="AssessRelationshipQuality", args={
                "relationship_context": relationship_context,"claimed_strength": claimed_strength,
            })
            return typing.cast(types.RelationshipQualityAssessment, result.cast_to(types, types, stream_types, False, __runtime__))
    def ExplainConvictionScore(self, relationship_uri: str,conviction_data: str,attestations: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ConvictionExplanation:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            stream = self.stream.ExplainConvictionScore(relationship_uri=relationship_uri,conviction_data=conviction_data,attestations=attestations,
                baml_options=baml_options)
            return stream.get_final_response()
        else:
            # Original non-streaming code
            result = self.__options.merge_options(baml_options).call_function_sync(function_name="ExplainConvictionScore", args={
                "relationship_uri": relationship_uri,"conviction_data": conviction_data,"attestations": attestations,
            })
            return typing.cast(types.ConvictionExplanation, result.cast_to(types, types, stream_types, False, __runtime__))
    def ExplainPathChoice(self, from_did: str,to_did: str,chosen_path: str,alternative_paths: str,selection_criteria: str,
        baml_options: BamlCallOptions = {},
    ) -> types.PathExplanation:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            stream = self.stream.ExplainPathChoice(from_did=from_did,to_did=to_did,chosen_path=chosen_path,alternative_paths=alternative_paths,selection_criteria=selection_criteria,
                baml_options=baml_options)
            return stream.get_final_response()
        else:
            # Original non-streaming code
            result = self.__options.merge_options(baml_options).call_function_sync(function_name="ExplainPathChoice", args={
                "from_did": from_did,"to_did": to_did,"chosen_path": chosen_path,"alternative_paths": alternative_paths,"selection_criteria": selection_criteria,
            })
            return typing.cast(types.PathExplanation, result.cast_to(types, types, stream_types, False, __runtime__))
    def ExplainTrustScore(self, entity_did: str,trust_metrics: str,network_context: str,
        baml_options: BamlCallOptions = {},
    ) -> types.TrustExplanation:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            stream = self.stream.ExplainTrustScore(entity_did=entity_did,trust_metrics=trust_metrics,network_context=network_context,
                baml_options=baml_options)
            return stream.get_final_response()
        else:
            # Original non-streaming code
            result = self.__options.merge_options(baml_options).call_function_sync(function_name="ExplainTrustScore", args={
                "entity_did": entity_did,"trust_metrics": trust_metrics,"network_context": network_context,
            })
            return typing.cast(types.TrustExplanation, result.cast_to(types, types, stream_types, False, __runtime__))
    def ExtractRelationshipsFromText(self, text: str,context_hint: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> types.RelationshipExtractionResult:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            stream = self.stream.ExtractRelationshipsFromText(text=text,context_hint=context_hint,
                baml_options=baml_options)
            return stream.get_final_response()
        else:
            # Original non-streaming code
            result = self.__options.merge_options(baml_options).call_function_sync(function_name="ExtractRelationshipsFromText", args={
                "text": text,"context_hint": context_hint,
            })
            return typing.cast(types.RelationshipExtractionResult, result.cast_to(types, types, stream_types, False, __runtime__))
    def GenerateFollowup(self, original_message: str,days_since_sent: int,any_responses: bool,new_context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> types.FollowupMessage:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            stream = self.stream.GenerateFollowup(original_message=original_message,days_since_sent=days_since_sent,any_responses=any_responses,new_context=new_context,
                baml_options=baml_options)
            return stream.get_final_response()
        else:
            # Original non-streaming code
            result = self.__options.merge_options(baml_options).call_function_sync(function_name="GenerateFollowup", args={
                "original_message": original_message,"days_since_sent": days_since_sent,"any_responses": any_responses,"new_context": new_context,
            })
            return typing.cast(types.FollowupMessage, result.cast_to(types, types, stream_types, False, __runtime__))
    def GenerateForwardingIntro(self, requester_context: str,target_context: str,intermediary_relationships: str,introduction_purpose: str,requested_outcome: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ForwardingIntro:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            stream = self.stream.GenerateForwardingIntro(requester_context=requester_context,target_context=target_context,intermediary_relationships=intermediary_relationships,introduction_purpose=introduction_purpose,requested_outcome=requested_outcome,
                baml_options=baml_options)
            return stream.get_final_response()
        else:
            # Original non-streaming code
            result = self.__options.merge_options(baml_options).call_function_sync(function_name="GenerateForwardingIntro", args={
                "requester_context": requester_context,"target_context": target_context,"intermediary_relationships": intermediary_relationships,"introduction_purpose": introduction_purpose,"requested_outcome": requested_outcome,
            })
            return typing.cast(types.ForwardingIntro, result.cast_to(types, types, stream_types, False, __runtime__))
    def GenerateIntroRequest(self, requester_did: str,requester_context: str,intermediary_did: str,intermediary_context: str,target_did: str,target_context: str,introduction_purpose: str,relationship_data: str,
        baml_options: BamlCallOptions = {},
    ) -> types.IntroductionMessage:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            stream = self.stream.GenerateIntroRequest(requester_did=requester_did,requester_context=requester_context,intermediary_did=intermediary_did,intermediary_context=intermediary_context,target_did=target_did,target_context=target_context,introduction_purpose=introduction_purpose,relationship_data=relationship_data,
                baml_options=baml_options)
            return stream.get_final_response()
        else:
            # Original non-streaming code
            result = self.__options.merge_options(baml_options).call_function_sync(function_name="GenerateIntroRequest", args={
                "requester_did": requester_did,"requester_context": requester_context,"intermediary_did": intermediary_did,"intermediary_context": intermediary_context,"target_did": target_did,"target_context": target_context,"introduction_purpose": introduction_purpose,"relationship_data": relationship_data,
            })
            return typing.cast(types.IntroductionMessage, result.cast_to(types, types, stream_types, False, __runtime__))
    def PlanIntroductionOrchestration(self, requester_did: str,target_did: str,intro_path: str,relationship_data: str,introduction_purpose: str,
        baml_options: BamlCallOptions = {},
    ) -> types.IntroOrchestrationPlan:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            stream = self.stream.PlanIntroductionOrchestration(requester_did=requester_did,target_did=target_did,intro_path=intro_path,relationship_data=relationship_data,introduction_purpose=introduction_purpose,
                baml_options=baml_options)
            return stream.get_final_response()
        else:
            # Original non-streaming code
            result = self.__options.merge_options(baml_options).call_function_sync(function_name="PlanIntroductionOrchestration", args={
                "requester_did": requester_did,"target_did": target_did,"intro_path": intro_path,"relationship_data": relationship_data,"introduction_purpose": introduction_purpose,
            })
            return typing.cast(types.IntroOrchestrationPlan, result.cast_to(types, types, stream_types, False, __runtime__))
    


class BamlStreamClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AssessIntroductionFeasibility(self, requester_did: str,target_did: str,proposed_path: str,relationship_data: str,introduction_purpose: str,timing_context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[stream_types.IntroFeasibility, types.IntroFeasibility]:
        ctx, result = self.__options.merge_options(baml_options).create_sync_stream(function_name="AssessIntroductionFeasibility", args={
            "requester_did": requester_did,"target_did": target_did,"proposed_path": proposed_path,"relationship_data": relationship_data,"introduction_purpose": introduction_purpose,"timing_context": timing_context,
        })
        return baml_py.BamlSyncStream[stream_types.IntroFeasibility, types.IntroFeasibility](
          result,
          lambda x: typing.cast(stream_types.IntroFeasibility, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.IntroFeasibility, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def AssessRelationshipQuality(self, relationship_context: str,claimed_strength: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[stream_types.RelationshipQualityAssessment, types.RelationshipQualityAssessment]:
        ctx, result = self.__options.merge_options(baml_options).create_sync_stream(function_name="AssessRelationshipQuality", args={
            "relationship_context": relationship_context,"claimed_strength": claimed_strength,
        })
        return baml_py.BamlSyncStream[stream_types.RelationshipQualityAssessment, types.RelationshipQualityAssessment](
          result,
          lambda x: typing.cast(stream_types.RelationshipQualityAssessment, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.RelationshipQualityAssessment, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ExplainConvictionScore(self, relationship_uri: str,conviction_data: str,attestations: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[stream_types.ConvictionExplanation, types.ConvictionExplanation]:
        ctx, result = self.__options.merge_options(baml_options).create_sync_stream(function_name="ExplainConvictionScore", args={
            "relationship_uri": relationship_uri,"conviction_data": conviction_data,"attestations": attestations,
        })
        return baml_py.BamlSyncStream[stream_types.ConvictionExplanation, types.ConvictionExplanation](
          result,
          lambda x: typing.cast(stream_types.ConvictionExplanation, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.ConvictionExplanation, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ExplainPathChoice(self, from_did: str,to_did: str,chosen_path: str,alternative_paths: str,selection_criteria: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[stream_types.PathExplanation, types.PathExplanation]:
        ctx, result = self.__options.merge_options(baml_options).create_sync_stream(function_name="ExplainPathChoice", args={
            "from_did": from_did,"to_did": to_did,"chosen_path": chosen_path,"alternative_paths": alternative_paths,"selection_criteria": selection_criteria,
        })
        return baml_py.BamlSyncStream[stream_types.PathExplanation, types.PathExplanation](
          result,
          lambda x: typing.cast(stream_types.PathExplanation, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.PathExplanation, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ExplainTrustScore(self, entity_did: str,trust_metrics: str,network_context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[stream_types.TrustExplanation, types.TrustExplanation]:
        ctx, result = self.__options.merge_options(baml_options).create_sync_stream(function_name="ExplainTrustScore", args={
            "entity_did": entity_did,"trust_metrics": trust_metrics,"network_context": network_context,
        })
        return baml_py.BamlSyncStream[stream_types.TrustExplanation, types.TrustExplanation](
          result,
          lambda x: typing.cast(stream_types.TrustExplanation, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.TrustExplanation, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ExtractRelationshipsFromText(self, text: str,context_hint: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[stream_types.RelationshipExtractionResult, types.RelationshipExtractionResult]:
        ctx, result = self.__options.merge_options(baml_options).create_sync_stream(function_name="ExtractRelationshipsFromText", args={
            "text": text,"context_hint": context_hint,
        })
        return baml_py.BamlSyncStream[stream_types.RelationshipExtractionResult, types.RelationshipExtractionResult](
          result,
          lambda x: typing.cast(stream_types.RelationshipExtractionResult, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.RelationshipExtractionResult, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def GenerateFollowup(self, original_message: str,days_since_sent: int,any_responses: bool,new_context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[stream_types.FollowupMessage, types.FollowupMessage]:
        ctx, result = self.__options.merge_options(baml_options).create_sync_stream(function_name="GenerateFollowup", args={
            "original_message": original_message,"days_since_sent": days_since_sent,"any_responses": any_responses,"new_context": new_context,
        })
        return baml_py.BamlSyncStream[stream_types.FollowupMessage, types.FollowupMessage](
          result,
          lambda x: typing.cast(stream_types.FollowupMessage, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.FollowupMessage, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def GenerateForwardingIntro(self, requester_context: str,target_context: str,intermediary_relationships: str,introduction_purpose: str,requested_outcome: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[stream_types.ForwardingIntro, types.ForwardingIntro]:
        ctx, result = self.__options.merge_options(baml_options).create_sync_stream(function_name="GenerateForwardingIntro", args={
            "requester_context": requester_context,"target_context": target_context,"intermediary_relationships": intermediary_relationships,"introduction_purpose": introduction_purpose,"requested_outcome": requested_outcome,
        })
        return baml_py.BamlSyncStream[stream_types.ForwardingIntro, types.ForwardingIntro](
          result,
          lambda x: typing.cast(stream_types.ForwardingIntro, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.ForwardingIntro, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def GenerateIntroRequest(self, requester_did: str,requester_context: str,intermediary_did: str,intermediary_context: str,target_did: str,target_context: str,introduction_purpose: str,relationship_data: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[stream_types.IntroductionMessage, types.IntroductionMessage]:
        ctx, result = self.__options.merge_options(baml_options).create_sync_stream(function_name="GenerateIntroRequest", args={
            "requester_did": requester_did,"requester_context": requester_context,"intermediary_did": intermediary_did,"intermediary_context": intermediary_context,"target_did": target_did,"target_context": target_context,"introduction_purpose": introduction_purpose,"relationship_data": relationship_data,
        })
        return baml_py.BamlSyncStream[stream_types.IntroductionMessage, types.IntroductionMessage](
          result,
          lambda x: typing.cast(stream_types.IntroductionMessage, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.IntroductionMessage, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def PlanIntroductionOrchestration(self, requester_did: str,target_did: str,intro_path: str,relationship_data: str,introduction_purpose: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[stream_types.IntroOrchestrationPlan, types.IntroOrchestrationPlan]:
        ctx, result = self.__options.merge_options(baml_options).create_sync_stream(function_name="PlanIntroductionOrchestration", args={
            "requester_did": requester_did,"target_did": target_did,"intro_path": intro_path,"relationship_data": relationship_data,"introduction_purpose": introduction_purpose,
        })
        return baml_py.BamlSyncStream[stream_types.IntroOrchestrationPlan, types.IntroOrchestrationPlan](
          result,
          lambda x: typing.cast(stream_types.IntroOrchestrationPlan, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.IntroOrchestrationPlan, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    

class BamlHttpRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AssessIntroductionFeasibility(self, requester_did: str,target_did: str,proposed_path: str,relationship_data: str,introduction_purpose: str,timing_context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="AssessIntroductionFeasibility", args={
            "requester_did": requester_did,"target_did": target_did,"proposed_path": proposed_path,"relationship_data": relationship_data,"introduction_purpose": introduction_purpose,"timing_context": timing_context,
        }, mode="request")
        return result
    def AssessRelationshipQuality(self, relationship_context: str,claimed_strength: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="AssessRelationshipQuality", args={
            "relationship_context": relationship_context,"claimed_strength": claimed_strength,
        }, mode="request")
        return result
    def ExplainConvictionScore(self, relationship_uri: str,conviction_data: str,attestations: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="ExplainConvictionScore", args={
            "relationship_uri": relationship_uri,"conviction_data": conviction_data,"attestations": attestations,
        }, mode="request")
        return result
    def ExplainPathChoice(self, from_did: str,to_did: str,chosen_path: str,alternative_paths: str,selection_criteria: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="ExplainPathChoice", args={
            "from_did": from_did,"to_did": to_did,"chosen_path": chosen_path,"alternative_paths": alternative_paths,"selection_criteria": selection_criteria,
        }, mode="request")
        return result
    def ExplainTrustScore(self, entity_did: str,trust_metrics: str,network_context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="ExplainTrustScore", args={
            "entity_did": entity_did,"trust_metrics": trust_metrics,"network_context": network_context,
        }, mode="request")
        return result
    def ExtractRelationshipsFromText(self, text: str,context_hint: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="ExtractRelationshipsFromText", args={
            "text": text,"context_hint": context_hint,
        }, mode="request")
        return result
    def GenerateFollowup(self, original_message: str,days_since_sent: int,any_responses: bool,new_context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="GenerateFollowup", args={
            "original_message": original_message,"days_since_sent": days_since_sent,"any_responses": any_responses,"new_context": new_context,
        }, mode="request")
        return result
    def GenerateForwardingIntro(self, requester_context: str,target_context: str,intermediary_relationships: str,introduction_purpose: str,requested_outcome: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="GenerateForwardingIntro", args={
            "requester_context": requester_context,"target_context": target_context,"intermediary_relationships": intermediary_relationships,"introduction_purpose": introduction_purpose,"requested_outcome": requested_outcome,
        }, mode="request")
        return result
    def GenerateIntroRequest(self, requester_did: str,requester_context: str,intermediary_did: str,intermediary_context: str,target_did: str,target_context: str,introduction_purpose: str,relationship_data: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="GenerateIntroRequest", args={
            "requester_did": requester_did,"requester_context": requester_context,"intermediary_did": intermediary_did,"intermediary_context": intermediary_context,"target_did": target_did,"target_context": target_context,"introduction_purpose": introduction_purpose,"relationship_data": relationship_data,
        }, mode="request")
        return result
    def PlanIntroductionOrchestration(self, requester_did: str,target_did: str,intro_path: str,relationship_data: str,introduction_purpose: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="PlanIntroductionOrchestration", args={
            "requester_did": requester_did,"target_did": target_did,"intro_path": intro_path,"relationship_data": relationship_data,"introduction_purpose": introduction_purpose,
        }, mode="request")
        return result
    

class BamlHttpStreamRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AssessIntroductionFeasibility(self, requester_did: str,target_did: str,proposed_path: str,relationship_data: str,introduction_purpose: str,timing_context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="AssessIntroductionFeasibility", args={
            "requester_did": requester_did,"target_did": target_did,"proposed_path": proposed_path,"relationship_data": relationship_data,"introduction_purpose": introduction_purpose,"timing_context": timing_context,
        }, mode="stream")
        return result
    def AssessRelationshipQuality(self, relationship_context: str,claimed_strength: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="AssessRelationshipQuality", args={
            "relationship_context": relationship_context,"claimed_strength": claimed_strength,
        }, mode="stream")
        return result
    def ExplainConvictionScore(self, relationship_uri: str,conviction_data: str,attestations: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="ExplainConvictionScore", args={
            "relationship_uri": relationship_uri,"conviction_data": conviction_data,"attestations": attestations,
        }, mode="stream")
        return result
    def ExplainPathChoice(self, from_did: str,to_did: str,chosen_path: str,alternative_paths: str,selection_criteria: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="ExplainPathChoice", args={
            "from_did": from_did,"to_did": to_did,"chosen_path": chosen_path,"alternative_paths": alternative_paths,"selection_criteria": selection_criteria,
        }, mode="stream")
        return result
    def ExplainTrustScore(self, entity_did: str,trust_metrics: str,network_context: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="ExplainTrustScore", args={
            "entity_did": entity_did,"trust_metrics": trust_metrics,"network_context": network_context,
        }, mode="stream")
        return result
    def ExtractRelationshipsFromText(self, text: str,context_hint: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="ExtractRelationshipsFromText", args={
            "text": text,"context_hint": context_hint,
        }, mode="stream")
        return result
    def GenerateFollowup(self, original_message: str,days_since_sent: int,any_responses: bool,new_context: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="GenerateFollowup", args={
            "original_message": original_message,"days_since_sent": days_since_sent,"any_responses": any_responses,"new_context": new_context,
        }, mode="stream")
        return result
    def GenerateForwardingIntro(self, requester_context: str,target_context: str,intermediary_relationships: str,introduction_purpose: str,requested_outcome: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="GenerateForwardingIntro", args={
            "requester_context": requester_context,"target_context": target_context,"intermediary_relationships": intermediary_relationships,"introduction_purpose": introduction_purpose,"requested_outcome": requested_outcome,
        }, mode="stream")
        return result
    def GenerateIntroRequest(self, requester_did: str,requester_context: str,intermediary_did: str,intermediary_context: str,target_did: str,target_context: str,introduction_purpose: str,relationship_data: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="GenerateIntroRequest", args={
            "requester_did": requester_did,"requester_context": requester_context,"intermediary_did": intermediary_did,"intermediary_context": intermediary_context,"target_did": target_did,"target_context": target_context,"introduction_purpose": introduction_purpose,"relationship_data": relationship_data,
        }, mode="stream")
        return result
    def PlanIntroductionOrchestration(self, requester_did: str,target_did: str,intro_path: str,relationship_data: str,introduction_purpose: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = self.__options.merge_options(baml_options).create_http_request_sync(function_name="PlanIntroductionOrchestration", args={
            "requester_did": requester_did,"target_did": target_did,"intro_path": intro_path,"relationship_data": relationship_data,"introduction_purpose": introduction_purpose,
        }, mode="stream")
        return result
    

b = BamlSyncClient(DoNotUseDirectlyCallManager({}))